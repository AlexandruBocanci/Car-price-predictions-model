from car_price_predictor import CarPricePredictor

def predict_single_car():
    """
    Func»õie simplƒÉ pentru predic»õia pre»õului unei singure ma»ôini
    """
    # √éncarcƒÉ modelul antrenat
    predictor = CarPricePredictor()
    
    try:
        predictor.load_model('car_price_model.pkl')
        print("Modelul a fost √ÆncƒÉrcat cu succes!")
    except FileNotFoundError:
        print("Eroare: Modelul nu a fost gƒÉsit. Rula»õi train_model.py mai √Ænt√¢i.")
        return
    
    print("\n" + "="*50)
    print("PREDICTOR PRE»ö MA»òINƒÇ SECOND-HAND")
    print("="*50)
    
    # ColecteazƒÉ datele de la utilizator
    try:
        manufacturer = input("Introduceti producatorul (ex: toyota, ford, honda): ").strip().lower()
        model = input("Introduceti modelul (ex: camry, f-150, civic): ").strip().lower()
        year = int(input("Introduceti anul (ex: 2015): "))
        odometer = int(input("Introduceti kilometrajul (ex: 75000): "))
        
        print("\nCaracteristici op»õionale (apƒÉsa»õi Enter pentru a sƒÉri):")
        fuel = input("Combustibil (gas/diesel/electric): ").strip().lower() or None
        condition = input("Starea (excellent/good/fair/poor): ").strip().lower() or None
        transmission = input("Transmisia (automatic/manual): ").strip().lower() or None
        vehicle_type = input("Tipul vehiculului (sedan/suv/pickup/coupe/hatchback): ").strip().lower() or None
        cylinders = input("NumƒÉrul de cilindri (4/6/8): ").strip() or None
        title_status = input("Statusul titlului (clean/lien/salvage): ").strip().lower() or None
        drive = input("Trac»õiunea (fwd/rwd/4wd): ").strip().lower() or None
        size = input("MƒÉrimea (compact/mid-size/full-size): ").strip().lower() or None
        paint_color = input("Culoarea (black/white/silver/red/blue): ").strip().lower() or None
        
        # FƒÉ predic»õia
        predicted_price = predictor.predict_price(
            manufacturer=manufacturer,
            model=model,
            year=year,
            odometer=odometer,
            fuel=fuel,
            condition=condition,
            transmission=transmission,
            vehicle_type=vehicle_type,
            cylinders=cylinders,
            title_status=title_status,
            drive=drive,
            size=size,
            paint_color=paint_color
        )
        
        print("\n" + "="*50)
        print("REZULTATUL PREDIC»öIEI")
        print("="*50)
        print(f"Ma»ôina: {manufacturer.title()} {model.title()} {year}")
        print(f"Kilometraj: {odometer:,} mile")
        if condition:
            print(f"Starea: {condition.title()}")
        if fuel:
            print(f"Combustibil: {fuel.title()}")
        if transmission:
            print(f"Transmisia: {transmission.title()}")
        
        print(f"\nüí∞ PRE»öUL ESTIMAT: ${predicted_price:,.2f}")
        print("="*50)
        
    except ValueError as e:
        print(f"Eroare: VƒÉ rugƒÉm sƒÉ introduce»õi valori valide pentru anul »ôi kilometrajul.")
    except Exception as e:
        print(f"Eroare nea»ôteptatƒÉ: {str(e)}")

def batch_predict():
    """
    Func»õie pentru predic»õii √Æn lot din fi»ôier CSV
    """
    predictor = CarPricePredictor()
    
    try:
        predictor.load_model('car_price_model.pkl')
        print("Modelul a fost √ÆncƒÉrcat cu succes!")
    except FileNotFoundError:
        print("Eroare: Modelul nu a fost gƒÉsit. Rula»õi train_model.py mai √Ænt√¢i.")
        return
    
    import pandas as pd
    
    # Exemplu de fi»ôier CSV de input
    input_file = input("Introduce»õi calea cƒÉtre fi»ôierul CSV cu ma»ôinile de evaluat: ")
    
    try:
        df = pd.read_csv(input_file)
        print(f"√éncƒÉrcat {len(df)} ma»ôini pentru evaluare...")
        
        predictions = []
        for _, row in df.iterrows():
            try:
                price = predictor.predict_price(
                    manufacturer=row.get('manufacturer', ''),
                    model=row.get('model', ''),
                    year=row.get('year', 2015),
                    odometer=row.get('odometer', 100000),
                    fuel=row.get('fuel', None),
                    condition=row.get('condition', None),
                    transmission=row.get('transmission', None),
                    vehicle_type=row.get('type', None)
                )
                predictions.append(price)
            except:
                predictions.append(None)
        
        df['predicted_price'] = predictions
        output_file = 'predictions_output.csv'
        df.to_csv(output_file, index=False)
        print(f"Predic»õiile au fost salvate √Æn {output_file}")
        
    except FileNotFoundError:
        print("Fi»ôierul specificat nu a fost gƒÉsit.")
    except Exception as e:
        print(f"Eroare: {str(e)}")

if __name__ == "__main__":
    while True:
        print("\n" + "="*50)
        print("MENIU PRINCIPAL")
        print("="*50)
        print("1. Predic»õie pentru o singurƒÉ ma»ôinƒÉ")
        print("2. Predic»õii √Æn lot din fi»ôier CSV")
        print("3. Ie»ôire")
        
        choice = input("\nAlege»õi o op»õiune (1-3): ").strip()
        
        if choice == '1':
            predict_single_car()
        elif choice == '2':
            batch_predict()
        elif choice == '3':
            print("La revedere!")
            break
        else:
            print("Op»õiune invalidƒÉ. VƒÉ rugƒÉm sƒÉ alege»õi 1, 2 sau 3.")
